!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("hospitalLib",[],e):"object"==typeof exports?exports.hospitalLib=e():t.hospitalLib=e()}(window,function(){return function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=i(1);e.Quarantine=s.Quarantine},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Quarantine=class{constructor(t){this.pPatients=void 0,this.pDrugs=void 0,this.dicDiseasesName={F:"Fever",D:"Diabete",T:"Tuberculosis",H:"Healthy",X:"Dead"},this.dicDrugsName={An:"Antibiotics",As:"Aspirin",I:"Insulin",P:"Paracetamol"},this.pPatients=Object.assign({},t)}setDrugs(t){this.pDrugs=t}wait40Days(){void 0!=this.pDrugs&&0!=this.pDrugs.length?this.pDrugs.find(t=>"As"==t)&&this.pDrugs.find(t=>"P"==t)?Object.keys(this.dicDiseasesName).forEach(t=>{"X"!=t&&this.setNewState(t,"X")}):((this.pDrugs.find(t=>"As"==t)||this.pDrugs.find(t=>"P"==t))&&this.setNewState("F","H"),this.pDrugs.find(t=>"An"==t)&&(this.pDrugs.find(t=>"I"==t)&&this.setNewState("H","F"),this.setNewState("T","H")),this.pDrugs.find(t=>"I"==t)||
//!I = D -> X
this.setNewState("D","X")):
//!I = D -> X
this.setNewState("D","X")}report(){return this.pPatients}setNewState(t,e){let i=this.pPatients[t];0!=i&&NaN!=i&&void 0!=i&&(NaN!=this.pPatients[e]&&void 0!=this.pPatients[e]||(this.pPatients[e]=0),this.pPatients[e]+=i,this.pPatients[t]=0)}}}])});